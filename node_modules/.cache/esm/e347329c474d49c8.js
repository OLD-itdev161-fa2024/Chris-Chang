let express,connectDatabase,check,validationResult,cors,bcrypt,jwt,config,User,auth;_474‍.w("express",[["default",["express"],function(v){express=v}]]);_474‍.w("./config/db",[["default",["connectDatabase"],function(v){connectDatabase=v}]]);_474‍.w("express-validator",[["check",["check"],function(v){check=v}],["validationResult",["validationResult"],function(v){validationResult=v}]]);_474‍.w("cors",[["default",["cors"],function(v){cors=v}]]);_474‍.w("bcryptjs",[["default",["bcrypt"],function(v){bcrypt=v}]]);_474‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);_474‍.w("config",[["default",["config"],function(v){config=v}]]);_474‍.w("./models/User",[["default",["User"],function(v){User=v}]]);_474‍.w("./middleware/auth",[["default",["auth"],function(v){auth=v}]]);











// Initialize express application
const app = express();

// Connect database
connectDatabase();

// Configure Middleware
app.use(express.json({ extended: false }));
app.use(
    cors({
        origin: 'http://localhost:3000'
    })
);

// API endpoints
/**
 * @route Get /
 * @desc Test endpoint
 */
app.get('/', (req, res) =>
    res.send('http get request sent to root api endpoint')
);

/**
 * @route POST api/users
 * @desc Register user
 */
app.post (
    '/api/users',
    [
        check('name', 'Please enter your name')
            .not()
            .isEmpty(),
        check('email', 'Please enter a valid email').isEmail(),
        check(
            'password',
            'Please enter a password with 6 or more characters'
        ).isLength({ min: 6 })
    ],
    async (req, res) => {
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            return res.status(422).json({ errors: errors.array() });
        } else {
            const { name, email, password } = req.body;
            try {
                // Check if user exists
                let user = await User.findOne({ email: email });
                if (user) {
                    return res
                        .status(400)
                        .json({ errors: [{ msg: 'User already exists '}]})
                }

                // Create a new user
                user = new User ({
                    name: name,
                    email: email,
                    password: password
                });

                // Encrypt the password
                const salt = await bcrypt.genSalt(10);
                user.password = await bcrypt.hash(password, salt);

                // Save to the db and return
                await user.save();

                //Generate and return a JWT token
                returnToken(user, res);
            } catch  (error) {
                res.status(500).send('Server error');
            }
        }
    }
);

/**
 * @route GET api/auth
 * @desc Authenticate user
 */
app.get('/api/auth', auth, async (req, res) => {
    try {
        const user = await User.findById(req.user.id);
        res.status(200).json(user);
    }   catch (error) {
        res.status(500).send('Unknown server error');
    }
});

/**
 * @route GET api/auth
 * @desc Authenticate user
 */
app.post(
    '/api/login',
    [
        check('email', 'Please enter a valid email').isEmail(),
        check('password', 'A password is required').exists()
    ],
    async (req, res) => {
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            return res.status(422).json({ errors: errors.array() });
        } else {
            const { email, password } = req.body;
            try {
            // Check if user exits
            let user = await User.findOne({ email: email });
            if (!user) {
                return res
                    .status(400)
                    .json({ errors: [{msg: 'Invalid email or password'}] });
            }

            //check password
            const match = await bcrypt.compare(password, user.password);
            if (!match) {
                return res
                    .status(400)
                    .json({ errors: [{ msg: 'Invalid email or password' }] });
            }

            //generate and return a jwt token
            returnToken(user, res);
            } catch (error) {
                res.status(500).send('Server error');
            }
        }
    }
);

const returnToken = (user, res) => {
    const payload = {
        user: {
            id: user.id
        }
    };

    jwt.sign(
        payload,
        config.get('jwtSecret'),
        { expiresIn: '10hr' },
        (err, token) => {
            if (err) throw err;
            res.json({ token: token });
        }
    );
};

// Connection listener
const port = 5000;
app.listen(port, () => console.log(`Express server running on port ${port}`));